Добалены дополнительные ответы:
dela=["Хорошо, спасибо! А у тебя? ",
    "Нормально, пока держимся 😊 ",
    "Всё отлично! Как сам? ",
    "Как в сказке — много дел, но я на коне! ",
    "Пока не жалуюсь! ",
    "Всё прекрасно, особенно когда тебя вижу! ",
    "Терпимо. А как ты? ",
    "Как обычно: работа, дом, спорт. А у тебя что нового? ",
    "Пока всё хорошо, надеюсь, так и продолжится! "]

добалена леманизация с помошью spacy:
nlp = spacy.load("ru_core_news_sm")
def process_text(text):
    doc=nlp(text)
    tokens=[token.lemma_ for token in doc]
    return tokens

добален 'vjwbjyfkmysq анализ текста с помошью библиотеки TextBlob:
def analyze_sentiment(text):
    global pol
    texten=Translator().translate(text, dest="en").text
    blop=TextBlob(texten)
    polarity=blop.sentiment.polarity
    if polarity>0.2 and pol<=0:
        pol = 1
        return f"Кстати я заметил, что сегодня ты счастливый!😁😆 "
    elif polarity<-0.1 and pol>=0:
        pol = -1
        return f"Не грусти! 👺 "
    elif pol!=0 and -0.1<polarity<0.2:
        pol = 0
        return "О, ты успокоился. 😘 "
    else:
        return ""

переписана вся логика на основе лемм:
text = text.lower()  # Приведение к нижнему регистру для унификации
    tokens=process_text(text)
    response=""
    if ("поиск" in  tokens) or ((("найдите" in  tokens) or ("найти" in  tokens) or ("найди"in  tokens)) and ("в" in  tokens) and ("интернет" in  tokens)):
        response = response + f"{search_web(text, tokens)}"

    if (("как" in  tokens) and ("дело"  in  tokens)) or (("как" in  tokens) and ("делишки"  in  tokens)):
        wt = lambda m: f"{random.choice(dela)}"
        response = response + wt(0)
    elif any(elem in tokens for elem in priv):
        ot = lambda m: f"{random.choice(hello)}"
        response = response + ot(0)

    if (("как" in tokens) and ("тебя" in tokens) and ("звать" in tokens)) or ((("твой" in  tokens) or ("твоё" in  tokens)) and "имя" in tokens):
        nt=lambda m: this_name()
        response = response + nt(0)
    elif (("теперь" in tokens) and ("тебя" in tokens) and ("звать" in tokens)) or (("теперь" in tokens) and ("ты" in tokens)):
        rt=lambda m: Rename(text, tokens)
        response = response + rt(0)

    if (("что" in tokens) and ("ты" in tokens) and ("уметь" in tokens)) or (("твой" in tokens) and ("навык" in tokens)):
        ct = lambda m: f"{random.choice(skills)}"
        response = response + f"Я умею отвечать на простые вопросы (время, дата, погода, базавая арифметика).\nПопробуй спросить: {ct(0)}"

    if (("сколько" in tokens) and (("время" in tokens) or ("времяни" in tokens))) or (("который" in tokens) and ("час" in tokens)):
        tt = lambda m: data_print()
        response = response + tt(0)
    elif (("дата" in tokens) or (("какой" in tokens) and ("сегодня" in tokens) and ("день" in tokens))):
        dt=lambda m: f"{datetime.date.today()}"
        response = response + f"Сегодня {dt(0)}"

    if (("погода" in tokens) and ("в" in tokens)):
        kt=lambda m: f"{weather_print(text)}"
        response = response + kt(0)
    noarithmetic=r"[*/](\d+)\s*([+*/\-])\s*(\d+)"
    arithmetic = "(\d+)\s*([+*/\-])\s*(\d+)"

    if re.search(noarithmetic,text):
        response=response + "Арифметическое выражение не может начинаться с * или / "
    elif re.search(arithmetic,text):
        ct = lambda m: f"{random.choice(calt)} {calculation(text)}"
        response = response + ct(0)

    response=response + f"{analyze_sentiment(text)}"
    log_dialog(text, response)
    return response
