import re
import webbrowser
from re import findall

import requests
import random
import datetime
from textblob import TextBlob
from googletrans import Translator
import spacy




api_key="212400d854618af6cab9a91302fc8e70"

name="–ë–æ—Ç"
pol=0

hello=["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è? ",
       "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –ï—Å—Ç—å —á—Ç–æ-—Ç–æ, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å? ",
       "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —É —Ç–µ–±—è –Ω–∞ —É–º–µ? ",
       "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞—à –¥–µ–Ω—å? ",
       "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? "]
skills=["–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ","–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å? ","–ö–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞? ","–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å? ","5+16 "]
time=["–°–µ–π—á–∞—Å ", "–ù–∞ —á–∞—Å–∞—Ö ", "–ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—é, —Å–µ–π—á–∞—Å "]
err=["–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å","–¢—è–∂–µ–ª—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–µ–Ω—è, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É"]
calt=["–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:","–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç","–í–æ–∑–º–æ–∂–Ω–æ –¥–ª—è —Ç–µ–±—è —ç—Ç–æ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç"]
goodbye=["–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!",
            "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! –ñ–µ–ª–∞—é –≤–∞–º —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è. –î–æ –Ω–æ–≤—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤!",
            "–ó–∞—Ö–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞! –£ –Ω–∞—Å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ. –ü—Ä–æ—â–∞–π—Ç–µ –∏ –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è! –ù–∞–¥–µ—é—Å—å, —è –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω. –£–¥–∞—á–∏ –≤–∞–º –∏ –¥–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!",
            "–í—Ä–µ–º—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É. –ù–æ —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –≤–∞–º —Å–Ω–æ–≤–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å. –ü–æ–∫–∞!",
            "–≠—Ç–æ –±—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä! –ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è –∏ –∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ!"]
dela=["–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è? ",
    "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ–∫–∞ –¥–µ—Ä–∂–∏–º—Å—è üòä ",
    "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Å–∞–º? ",
    "–ö–∞–∫ –≤ —Å–∫–∞–∑–∫–µ ‚Äî –º–Ω–æ–≥–æ –¥–µ–ª, –Ω–æ —è –Ω–∞ –∫–æ–Ω–µ! ",
    "–ü–æ–∫–∞ –Ω–µ –∂–∞–ª—É—é—Å—å! ",
    "–í—Å—ë –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç–µ–±—è –≤–∏–∂—É! ",
    "–¢–µ—Ä–ø–∏–º–æ. –ê –∫–∞–∫ —Ç—ã? ",
    "–ö–∞–∫ –æ–±—ã—á–Ω–æ: —Ä–∞–±–æ—Ç–∞, –¥–æ–º, —Å–ø–æ—Ä—Ç. –ê —É —Ç–µ–±—è —á—Ç–æ –Ω–æ–≤–æ–≥–æ? ",
    "–ü–æ–∫–∞ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –Ω–∞–¥–µ—é—Å—å, —Ç–∞–∫ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è! "]
priv=["–ø—Ä–∏–≤–µ—Ç" , "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å" , "—Å–∞–ª—é—Ç" , '—Ö–∞–π' , '–π–æ—É' , '–¥–∞—Ä–æ–≤–∞' , '–ø—Ä–∏–≤–µ—Ç–∏–∫–∏' , '—à–∞–ª–æ–º' , '–±–æ–Ω–∂—É—Ä' , "—Ö—ç–ª–ª–æ—É"]






nlp = spacy.load("ru_core_news_sm")

def process_text(text):
    doc=nlp(text)
    tokens=[token.lemma_ for token in doc]
    return tokens


def analyze_sentiment(text):
    global pol
    texten=Translator().translate(text, dest="en").text
    blop=TextBlob(texten)
    polarity=blop.sentiment.polarity
    if polarity>0.2 and pol<=0:
        pol = 1
        return f"–ö—Å—Ç–∞—Ç–∏ —è –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã–π!üòÅüòÜ "
    elif polarity<-0.1 and pol>=0:
        pol = -1
        return f"–ù–µ –≥—Ä—É—Å—Ç–∏! üë∫ "
    elif pol!=0 and -0.1<polarity<0.2:
        pol = 0
        return "–û, —Ç—ã —É—Å–ø–æ–∫–æ–∏–ª—Å—è. üòò "
    else:
        return ""


def this_name():
    I_am=[f"–Ø {name}-–ø–æ–º–æ—â–Ω–∏–∫!",
          f"–Ø ‚Äî –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –∑–≤–∞—Ç—å –º–µ–Ω—è {name}! ",
          f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? ",
          f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}, —è —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ! "]
    return random.choice(I_am)


def log_dialog(user_input, bot_response):
    data = datetime.datetime.now()
    with open("chat_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.date.today()} {data.hour}:{data.minute}:{data.second}\n")
        log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n")
        log_file.write(f"{name}: {bot_response}\n")
        log_file.write("-" * 60 + "\n")


def search_web(text, tokens):
    if "–≤" and "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç" in tokens:
        query=r'"(.*?)"'
        querys=findall(query,text)
        j=len(querys)
        if j!=0:
            for i in range(j):
                url = f"https://www.google.com/search?q={querys[i]}"
                webbrowser.open(url)
            return f"–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {querys}. "
        else:
            return f"–¢–æ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–æ–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö. "
    else:
        return f"–í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –¢–æ–≥–¥–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫ –ø–æ–∏—Å–∫—É —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ '–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ'. "

def Rename(text, tokens):
    nam=r'"(.*?)"'
    nams=findall(nam,text)
    j=len(nams)
    if j==1:
        global name
        name = nams[0]
        return f"–£–†–ê! –¢–µ–ø–µ—Ä—å –º–µ–Ω—è –∑–æ–≤—É—Ç {name} üòÉ "
    if j==0:
        return f"–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –º–µ–Ω—è –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç –∏–º—è –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö. "
    else:
        return f"–ù–µ –ø–æ–Ω–∏–º–∞—é –≤ –∫–∞–∫–∏—Ö –∫–∞–≤—ã—á–∫–∞—Ö –º–æ–µ –∏–º—è. –ù–∞–ø–∏—à–∏ –∏–º—è –≤ –¥–≤–æ–π–Ω—ã –∫–∞–≤—ã—á–∫–∞—Ö –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–ª—å—à–µ. "


def calculation(text):
    nub="(\d+)"
    sign="([+*/\-])"
    a=re.findall(nub,text)
    b=re.findall(sign,text)
    nubt1=a[0]
    nubt2=a[1]
    nub1=float(nubt1)
    nub2=float(nubt2)
    if len(b)>1:
        if b[0]=="-":
            if b[1] == '+':
                return (-nub1 + nub2)
            else:
                if b[1] == '-':
                    return (-nub1 - nub2)
                else:
                    if b[1] == '*':
                        return (-nub1 * nub2)
                    else:
                        return (-nub1 / nub2)
        else:
            if b[1] == '+':
                return (nub1 + nub2)
            else:
                if b[1] == '-':
                    return (nub1 - nub2)
                else:
                    if b[1] == '*':
                        return (nub1 * nub2)
                    else:
                        return (nub1 / nub2)
    else:
        if b[0] =='+':
            return (nub1+nub2)
        else:
            if b[0] =='-':
                return (nub1 - nub2)
            else:
                if b[0] =='*':
                    return (nub1 * nub2)
                else:
                    return (nub1 / nub2)


def weather_print(text):
    s = r'"(.*?)"'
    citys = findall(s, text)
    j = len(citys)
    if j == 1:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={citys[0]}&appid={api_key}&units=metric&lang=ru"
        response=requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            wind = data["wind"]["speed"]
            humidity = data["main"]["humidity"]
            weather_desc = data["weather"][0]["description"]
            return (f"–í –≥–æ—Ä–æ–¥–µ {citys[0]} —Å–µ–π—á–∞—Å {weather_desc} –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {temp}¬∞C. "
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {wind} –≤ –º/c, –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ {humidity} %")
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥. "
    elif j == 0:
        return "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ  –≤ –≥–æ—Ä–æ–¥–µ, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö "
    else:
        return "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤ –∫–∞–∫–∏—Ö –∫–∞–≤—ã—á–∫–∞—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –≤ –¥–≤–æ–π–Ω—ã –∫–∞–≤—ã—á–∫–∞—Ö –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–∞–ª—å—à–µ. "

def data_print():
    data = datetime.datetime.now()
    return f"{random.choice(time)} {data.hour}:{data.minute}:{data.second}"


def chatbot_response(text):

    text = text.lower()  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    tokens=process_text(text)
    response=""
    if ("–ø–æ–∏—Å–∫" in  tokens) or ((("–Ω–∞–π–¥–∏—Ç–µ" in  tokens) or ("–Ω–∞–π—Ç–∏" in  tokens) or ("–Ω–∞–π–¥–∏"in  tokens)) and ("–≤" in  tokens) and ("–∏–Ω—Ç–µ—Ä–Ω–µ—Ç" in  tokens)):
        response = response + f"{search_web(text, tokens)}"

    if (("–∫–∞–∫" in  tokens) and ("–¥–µ–ª–æ"  in  tokens)) or (("–∫–∞–∫" in  tokens) and ("–¥–µ–ª–∏—à–∫–∏"  in  tokens)):
        wt = lambda m: f"{random.choice(dela)}"
        response = response + wt(0)
    elif any(elem in tokens for elem in priv):
        ot = lambda m: f"{random.choice(hello)}"
        response = response + ot(0)

    if (("–∫–∞–∫" in tokens) and ("—Ç–µ–±—è" in tokens) and ("–∑–≤–∞—Ç—å" in tokens)) or ((("—Ç–≤–æ–π" in  tokens) or ("—Ç–≤–æ—ë" in  tokens)) and "–∏–º—è" in tokens):
        nt=lambda m: this_name()
        response = response + nt(0)
    elif (("—Ç–µ–ø–µ—Ä—å" in tokens) and ("—Ç–µ–±—è" in tokens) and ("–∑–≤–∞—Ç—å" in tokens)) or (("—Ç–µ–ø–µ—Ä—å" in tokens) and ("—Ç—ã" in tokens)):
        rt=lambda m: Rename(text, tokens)
        response = response + rt(0)

    if (("—á—Ç–æ" in tokens) and ("—Ç—ã" in tokens) and ("—É–º–µ—Ç—å" in tokens)) or (("—Ç–≤–æ–π" in tokens) and ("–Ω–∞–≤—ã–∫" in tokens)):
        ct = lambda m: f"{random.choice(skills)}"
        response = response + f"–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≤—Ä–µ–º—è, –¥–∞—Ç–∞, –ø–æ–≥–æ–¥–∞, –±–∞–∑–∞–≤–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞).\n–ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å: {ct(0)}"

    if (("—Å–∫–æ–ª—å–∫–æ" in tokens) and (("–≤—Ä–µ–º—è" in tokens) or ("–≤—Ä–µ–º—è–Ω–∏" in tokens))) or (("–∫–æ—Ç–æ—Ä—ã–π" in tokens) and ("—á–∞—Å" in tokens)):
        tt = lambda m: data_print()
        response = response + tt(0)
    elif (("–¥–∞—Ç–∞" in tokens) or (("–∫–∞–∫–æ–π" in tokens) and ("—Å–µ–≥–æ–¥–Ω—è" in tokens) and ("–¥–µ–Ω—å" in tokens))):
        dt=lambda m: f"{datetime.date.today()}"
        response = response + f"–°–µ–≥–æ–¥–Ω—è {dt(0)}"

    if (("–ø–æ–≥–æ–¥–∞" in tokens) and ("–≤" in tokens)):
        kt=lambda m: f"{weather_print(text)}"
        response = response + kt(0)
    noarithmetic=r"[*/](\d+)\s*([+*/\-])\s*(\d+)"
    arithmetic = "(\d+)\s*([+*/\-])\s*(\d+)"

    if re.search(noarithmetic,text):
        response=response + "–ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å * –∏–ª–∏ / "
    elif re.search(arithmetic,text):
        ct = lambda m: f"{random.choice(calt)} {calculation(text)}"
        response = response + ct(0)

    response=response + f"{analyze_sentiment(text)}"
    log_dialog(text, response)
    return response

if __name__ == "__main__":
    with open("chat_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n")
        log_file.write("-" * 60 + "\n")


    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")
    while True:
        user_input = input("–í—ã: ")
        if user_input.lower() == "–≤—ã—Ö–æ–¥":
            print(f"{name}: {random.choice(goodbye)}")
            break
        print(f"{name}:", chatbot_response(user_input))
